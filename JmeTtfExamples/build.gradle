// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

plugins {
    id 'application'
}

application {
    mainClass = 'com.atr.jme.font.example.TestAtlasResize'
}
if (!hasProperty('mainClass')) {
    ext.mainClass = application.mainClass
}
jar.manifest.attributes('Main-Class': application.mainClass)

dependencies {
    runtimeOnly 'org.jmonkeyengine:jme3-desktop:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jme3Version

    // JmeTtfExamples doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid warnings from AssetConfig.
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jme3Version

    //implementation 'com.github.stephengold:jme-ttf:' + jmeTtfVersion // for published library
    implementation project(':JmeTtfLibrary') // for latest sourcecode
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
Boolean isMacOS = DefaultNativePlatform.currentOperatingSystem.isMacOsX()

tasks.withType(JavaExec) { // Java runtime options:
    if (isMacOS) {
        jvmArgs '-XstartOnFirstThread'
    } else {
        args '--showSettingsDialog'
    }
    classpath sourceSets.main.runtimeClasspath
    enableAssertions true
}

// cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanSOs')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}

// tasks to run specific apps:

tasks.register('runAtlasResize', JavaExec) {
    mainClass = 'com.atr.jme.font.example.TestAtlasResize'
}
tasks.register('runTrueTypeBMP', JavaExec) {
    mainClass = 'com.atr.jme.font.example.TestTrueTypeBMP'
}
tasks.register('runTrueTypeMesh', JavaExec) {
    mainClass = 'com.atr.jme.font.example.TestTrueTypeMesh'
}
