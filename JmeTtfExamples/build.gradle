// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

plugins {
    id 'application'
}

mainClassName = 'com.atr.jme.font.example.TestAtlasResize'
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}
jar.manifest.attributes('Main-Class': mainClassName)

dependencies {
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jme3Version

    // JmeTtfExamples doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid warnings from AssetConfig.
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jme3Version

    // LWJGL 3.3 dependencies that were omitted from JME v3.5:
    runtimeOnly 'org.lwjgl:lwjgl:' + lwjgl3Version + ':natives-macos-arm64'
    runtimeOnly 'org.lwjgl:lwjgl-glfw:' + lwjgl3Version + ':natives-macos-arm64'
    runtimeOnly 'org.lwjgl:lwjgl-jemalloc:' + lwjgl3Version + ':natives-macos-arm64'
    runtimeOnly 'org.lwjgl:lwjgl-openal:' + lwjgl3Version + ':natives-macos-arm64'
    runtimeOnly 'org.lwjgl:lwjgl-opengl:' + lwjgl3Version + ':natives-macos-arm64'

    //implementation 'com.github.stephengold:jme-ttf:' + jmeTtfVersion
    implementation project(':JmeTtfLibrary')
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform;
Boolean isMacOS = DefaultNativePlatform.currentOperatingSystem.isMacOsX();

tasks.withType(JavaExec) { // Java runtime options:
    if (isMacOS) {
        jvmArgs '-XstartOnFirstThread'
    } else {
        args '--showSettingsDialog'
    }
    classpath sourceSets.main.runtimeClasspath
    enableAssertions true
}

// cleanup tasks

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanSOs')

task cleanDLLs(type: Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanDyLibs(type: Delete) { // extracted macOSX native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
task cleanSOs(type: Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}

// tasks to run the example apps:

task runAtlasResize(type: JavaExec) {
    mainClass = 'com.atr.jme.font.example.TestAtlasResize'
}
task runTrueTypeBMP(type: JavaExec) {
    mainClass = 'com.atr.jme.font.example.TestTrueTypeBMP'
}
task runTrueTypeMesh(type: JavaExec) {
    mainClass = 'com.atr.jme.font.example.TestTrueTypeMesh'
}
